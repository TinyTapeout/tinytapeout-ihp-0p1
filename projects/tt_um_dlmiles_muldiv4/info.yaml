---
# TinyTapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here.
# Source files must be in ./src and you must list each source file separately
  source_files:
    - AND_GATE.v
    - AND_GATE_4_INPUTS.v
    - DIVUNIT.v
    - FA.v
    - HA.v
    - Multiplexer_2.v
    - NAND_GATE.v
    - OR_GATE.v
    - XOR_GATE_ONEHOT.v
    - div4.v
    - mul4.v
    - top_tt_um_dlmiles_muldiv4.v
    - tb.v
  top_module:  "tt_um_dlmiles_muldiv4"      # put the name of your top module here, make it unique by prepending your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation:
  author:       "Darryl Miles"
  title:        "MULDIV unit (4-bit signed/unsigned)"
  language:     "Verilog"
  description:  "Combinational Multiply and Divide Unit (signed and unsigned)"

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      Combinational multiply / divider unit (no clock in use)

      Multiplier (signed/unsigned)
      Method uses Ripple Carry Array as 'high speed multiplier'
      Setup operation mode bits MULDIV=0 and OPSIGNED(unsigned=0/signed=1)
      Setup A (multiplier 4-bit) * B (multiplicand 4-bit)
      Expect result P (product 8-bit)

      Divider (signed/unsigned)
      Method uses Full Adder with Mux as 'combinational restoring array divider algorithm'.
      Setup operation mode bits MULDIV=1 and OPSIGNED(unsigned=0/signed=1)
      Setup Dend (dividend 4-bit) / Dsor (divisor 4-bit)
      Expect result Q (quotient 4-bit) with R (remainder 4-bit)

      Divider has error bit indicators that take precedence over any result.
      If any error bit is set then the output Q and R should be disregarded.
      When in multiplier mode error bits are muted to 0.
      No input values can cause an overflow error so the bit is always reset.

      The project was sketched out and tested with logisim-evolution
      https\://github.com/logisim-evolution/logisim-evolution then exported
      direct to verilog (as if it was for a FPGA development board using the
      built in process).

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      Setup the input state expect immediate output (after gate propagation delays).

# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:
    - MUL A[0], DIV Dend[0]
    - MUL A[1], DIV Dend[1]
    - MUL A[2], DIV Dend[2]
    - MUL A[3], DIV Dend[3]
    - MUL B[0], DIV Dsor[0]
    - MUL B[1], DIV Dsor[1]
    - MUL B[2], DIV Dsor[2]
    - MUL B[3], DIV Dsor[3]
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - MUL P[0], DIV Q[0]
    - MUL P[1], DIV Q[1]
    - MUL P[2], DIV Q[2]
    - MUL P[3], DIV Q[3]
    - MUL P[4], DIV R[0]
    - MUL P[5], DIV R[1]
    - MUL P[6], DIV R[2]
    - MUL P[7], DIV R[3]
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - (unused)
    - (unused)
    - (unused)
    - (unused)
    - DIV error overflow (output only)
    - DIV error divide-by-zero (output only)
    - OPSIGNED mode (input only)
    - MULDIV mode (input only)

# The following fields are optional
  tag:          "multiplier, divider"      # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  ""      # Describe any external hardware needed
  discord:      ""      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     "https://dlmiles.github.io/tt04-muldiv4/"      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     10000000       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository
